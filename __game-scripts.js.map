{"version":3,"sources":["scripts/touch-input.js","scripts/orbit-camera.js","scripts/mouse-input.js","scripts/keyboard-input.js"],"names":[],"mappings":"AACA,IAAI,WAAa,GAAG,aAAa,cAEjC,WAAW,WAAW,IAAI,mBAAoB,CAC1C,KAAM,SACN,QAAS,GACT,MAAO,oBACP,YAAa,iEAGjB,WAAW,WAAW,IAAI,sBAAuB,CAC7C,KAAM,SACN,QAAS,GACT,MAAO,uBACP,YAAa,2DAIjB,WAAW,UAAU,WAAa,WAC9B,KAAK,YAAc,KAAK,OAAO,OAAO,YAGtC,KAAK,eAAiB,IAAI,GAAG,KAC7B,KAAK,kBAAoB,IAAI,GAAG,KAChC,KAAK,kBAAoB,EAErB,KAAK,aAAe,KAAK,IAAI,QAG7B,KAAK,IAAI,MAAM,GAAG,GAAG,iBAAkB,KAAK,sBAAuB,MACnE,KAAK,IAAI,MAAM,GAAG,GAAG,eAAgB,KAAK,sBAAuB,MACjE,KAAK,IAAI,MAAM,GAAG,GAAG,kBAAmB,KAAK,sBAAuB,MAEpE,KAAK,IAAI,MAAM,GAAG,GAAG,gBAAiB,KAAK,YAAa,MAExD,KAAK,GAAG,WAAW,WACf,KAAK,IAAI,MAAM,IAAI,GAAG,iBAAkB,KAAK,sBAAuB,MACpE,KAAK,IAAI,MAAM,IAAI,GAAG,eAAgB,KAAK,sBAAuB,MAClE,KAAK,IAAI,MAAM,IAAI,GAAG,kBAAmB,KAAK,sBAAuB,MAErE,KAAK,IAAI,MAAM,IAAI,GAAG,gBAAiB,KAAK,YAAa,WAMrE,WAAW,UAAU,iBAAmB,SAAU,EAAQ,GAEtD,IAAI,EAAK,EAAO,EAAI,EAAO,EACvB,EAAK,EAAO,EAAI,EAAO,EAE3B,OAAO,KAAK,KAAM,EAAK,EAAO,EAAK,IAIvC,WAAW,UAAU,aAAe,SAAU,EAAQ,EAAQ,GAC1D,EAAO,IAAI,EAAO,EAAI,EAAO,EAAG,EAAO,EAAI,EAAO,GAClD,EAAO,MAAM,IACb,EAAO,GAAK,EAAO,EACnB,EAAO,GAAK,EAAO,GAIvB,WAAW,UAAU,sBAAwB,SAAS,GAGlD,IAAI,EAAU,EAAM,QACE,GAAlB,EAAQ,OACR,KAAK,eAAe,IAAI,EAAQ,GAAG,EAAG,EAAQ,GAAG,GAExB,GAAlB,EAAQ,SAEf,KAAK,kBAAoB,KAAK,iBAAiB,EAAQ,GAAI,EAAQ,IACnE,KAAK,aAAa,EAAQ,GAAI,EAAQ,GAAI,KAAK,qBAKvD,WAAW,eAAiB,IAAI,GAAG,KACnC,WAAW,aAAe,IAAI,GAAG,KACjC,WAAW,UAAY,IAAI,GAAG,KAG9B,WAAW,UAAU,IAAM,SAAS,GAChC,IAAI,EAAiB,WAAW,eAC5B,EAAe,WAAW,aAC1B,EAAY,WAAW,UAIvB,EAAS,KAAK,OAAO,OACrB,EAAW,KAAK,YAAY,SAEhC,EAAO,cAAc,EAAS,EAAG,EAAS,EAAG,EAAU,GACvD,EAAO,cAAc,KAAK,kBAAkB,EAAG,KAAK,kBAAkB,EAAG,EAAU,GAEnF,EAAU,KAAK,EAAc,GAE7B,KAAK,YAAY,WAAW,IAAI,IAIpC,WAAW,cAAgB,IAAI,GAAG,KAElC,WAAW,UAAU,YAAc,SAAS,GACxC,IAAI,EAAgB,WAAW,cAI3B,EAAU,EAAM,QACpB,GAAsB,GAAlB,EAAQ,OAAa,CACrB,IAAI,EAAQ,EAAQ,GAEpB,KAAK,YAAY,QAAU,EAAM,EAAI,KAAK,eAAe,GAAK,KAAK,iBACnE,KAAK,YAAY,MAAQ,EAAM,EAAI,KAAK,eAAe,GAAK,KAAK,iBAEjE,KAAK,eAAe,IAAI,EAAM,EAAG,EAAM,QAEpC,GAAsB,GAAlB,EAAQ,OAAa,CAE5B,IAAI,EAAuB,KAAK,iBAAiB,EAAQ,GAAI,EAAQ,IACjE,EAAsB,EAAuB,KAAK,kBACtD,KAAK,kBAAoB,EAEzB,KAAK,YAAY,UAAa,EAAsB,KAAK,oBAAsB,IAAoC,GAA5B,KAAK,YAAY,UAGxG,KAAK,aAAa,EAAQ,GAAI,EAAQ,GAAI,GAC1C,KAAK,IAAI,GACT,KAAK,kBAAkB,KAAK,KChIpC,IAAI,YAAc,GAAG,aAAa,eAElC,YAAY,WAAW,IAAI,aAAc,CACrC,KAAM,UACN,SAAS,EACT,MAAO,cACP,YAAa,wFAGjB,YAAY,WAAW,IAAI,cAAe,CAAC,KAAM,SAAU,QAAS,EAAG,MAAO,eAAgB,YAAa,2DAC3G,YAAY,WAAW,IAAI,cAAe,CAAC,KAAM,SAAU,QAAS,EAAG,MAAO,iBAC9E,YAAY,WAAW,IAAI,gBAAiB,CAAC,KAAM,SAAU,QAAS,GAAI,MAAO,8BACjF,YAAY,WAAW,IAAI,gBAAiB,CAAC,KAAM,SAAU,SAAU,GAAI,MAAO,8BAElF,YAAY,WAAW,IAAI,gBAAiB,CACxC,KAAM,SACN,QAAS,EACT,MAAO,iBACP,YAAa,wHAGjB,YAAY,WAAW,IAAI,cAAe,CACtC,KAAM,SACN,MAAO,eACP,YAAa,0FAGjB,YAAY,WAAW,IAAI,eAAgB,CACvC,KAAM,UACN,SAAS,EACT,MAAO,iBACP,YAAa,iEAMjB,OAAO,eAAe,YAAY,UAAW,WAAY,CACrD,IAAK,WACD,OAAO,KAAK,iBAGhB,IAAK,SAAS,GACV,KAAK,gBAAkB,KAAK,eAAe,MAQnD,OAAO,eAAe,YAAY,UAAW,QAAS,CAClD,IAAK,WACD,OAAO,KAAK,cAGhB,IAAK,SAAS,GACV,KAAK,aAAe,KAAK,iBAAiB,MAMlD,OAAO,eAAe,YAAY,UAAW,MAAO,CAChD,IAAK,WACD,OAAO,KAAK,YAGhB,IAAK,SAAS,GACV,KAAK,WAAa,EAKlB,IACI,GADO,KAAK,WAAa,KAAK,MACZ,IAElB,KAAK,WADL,EAAW,IACO,KAAK,MAAQ,IAAM,GAC9B,GAAY,IACD,KAAK,MAAQ,IAAM,GAEnB,KAAK,KAAO,KAO1C,OAAO,eAAe,YAAY,UAAW,aAAc,CACvD,IAAK,WACD,OAAO,KAAK,aAGhB,IAAK,SAAS,GACV,KAAK,YAAY,KAAK,MAM9B,YAAY,UAAU,MAAQ,SAAU,GAEpC,KAAK,WAAW,EAAa,GAE7B,IAAI,EAAc,KAAK,YAAY,YAE/B,EAAW,KAAK,IAAI,EAAY,EAAG,KAAK,IAAI,EAAY,EAAG,EAAY,IAC3E,GAAuB,KAAK,IAAI,GAAM,KAAK,OAAO,OAAO,IAAM,GAAG,KAAK,YACvE,GAAuB,EAEvB,KAAK,SAAW,EAEhB,KAAK,iBAEL,KAAK,YAAY,KAAK,KAAK,YAAY,SAI3C,YAAY,gBAAkB,IAAI,GAAG,KAIrC,YAAY,UAAU,oBAAsB,SAAU,EAAY,GAC9D,KAAK,WAAW,KAAK,GACrB,KAAK,OAAO,YAAY,GAExB,KAAK,OAAO,OAAO,GAEnB,IAAI,EAAW,YAAY,gBAC3B,EAAS,KAAK,EAAa,GAC3B,KAAK,SAAW,EAAS,SAEzB,KAAK,WAAW,KAAK,GAErB,IAAI,EAAa,KAAK,OAAO,cAC7B,KAAK,IAAM,KAAK,SAAS,GACzB,KAAK,MAAQ,KAAK,WAAW,EAAY,KAAK,KAE9C,KAAK,iBACL,KAAK,kBAEA,KAAK,aACN,KAAK,IAAI,iBAAkB,IAOnC,YAAY,UAAU,qBAAuB,SAAU,EAAY,GAC/D,KAAK,WAAW,EAAQ,GACxB,KAAK,oBAAoB,EAAY,KAAK,YAAY,SAK1D,YAAY,UAAU,MAAQ,SAAU,EAAK,EAAO,GAChD,KAAK,MAAQ,EACb,KAAK,IAAM,EACX,KAAK,SAAW,EAEhB,KAAK,iBAEA,KAAK,aACN,KAAK,IAAI,iBAAkB,IAOnC,YAAY,UAAU,WAAa,WAC/B,KAAK,oBAGL,KAAK,YAAc,IAAI,GAAG,YAC1B,KAAK,WAAW,KAAK,aAAe,KAAK,IAAI,KAAM,GAEnD,KAAK,OAAO,OAAO,KAAK,YAAY,QAEpC,KAAK,YAAc,IAAI,GAAG,KAC1B,KAAK,YAAY,KAAK,KAAK,YAAY,QAEvC,KAAK,qBAAuB,KAAK,YAAY,QAI7C,IAAI,EAAa,KAAK,OAAO,cAe7B,GAZA,KAAK,KAAO,KAAK,SAAS,GAC1B,KAAK,OAAS,KAAK,iBAAiB,KAAK,WAAW,EAAY,KAAK,OACrE,KAAK,OAAO,oBAAoB,KAAK,OAAQ,KAAK,KAAM,GAExD,KAAK,UAAY,EAEjB,KAAK,WAAa,KAAK,KACvB,KAAK,aAAe,KAAK,OAKrB,KAAK,aACL,KAAK,MAAM,KAAK,aAAe,KAAK,IAAI,UACrC,CACH,IAAI,EAAkB,IAAI,GAAG,KAC7B,EAAgB,KAAK,KAAK,OAAO,cAAe,KAAK,aACrD,KAAK,UAAY,KAAK,eAAe,EAAgB,UAGzD,KAAK,gBAAkB,KAAK,UAE5B,KAAK,mBAAqB,KAAK,IAAI,WAG/B,KAAK,IAAI,aACT,KAAK,IAAI,WAAa,KAAK,YAG1B,KAAK,aACN,KAAK,IAAI,iBAAkB,GAG/B,KAAK,GAAG,mBAAmB,SAAU,EAAO,GACxC,KAAK,IAAI,WAAa,EACjB,KAAK,aACN,KAAK,IAAI,iBAAkB,KAEhC,MAGH,KAAK,GAAG,oBAAoB,SAAU,EAAO,GACzC,KAAK,gBAAkB,KAAK,eAAe,KAAK,aACjD,MAEH,KAAK,GAAG,oBAAoB,SAAU,EAAO,GACzC,KAAK,gBAAkB,KAAK,eAAe,KAAK,aACjD,MAEH,KAAK,GAAG,sBAAsB,SAAU,EAAO,GAC3C,KAAK,aAAe,KAAK,iBAAiB,KAAK,UAChD,MAEH,KAAK,GAAG,sBAAsB,SAAU,EAAO,GAC3C,KAAK,aAAe,KAAK,iBAAiB,KAAK,UAChD,MAGH,KAAK,GAAG,oBAAoB,SAAU,EAAO,GACrC,KAAK,aACL,KAAK,MAAM,GAAS,KAAK,IAAI,MAE7B,KAAK,qBAAqB,KAAK,OAAO,cAAe,GAAS,KAAK,IAAI,QAE5E,MAEH,KAAK,GAAG,qBAAqB,SAAU,EAAO,GACtC,GACA,KAAK,MAAM,KAAK,aAAe,KAAK,IAAI,QAE7C,MAEH,IAAI,eAAiB,WACjB,KAAK,oBACA,KAAK,aACN,KAAK,IAAI,iBAAkB,IAInC,KAAK,IAAI,eAAe,GAAG,eAAgB,eAAgB,MAE3D,KAAK,GAAG,WAAW,WACf,KAAK,IAAI,eAAe,IAAI,eAAgB,eAAgB,MAC5D,KAAK,IAAI,WAAa,KAAK,qBAC5B,OAIP,YAAY,UAAU,OAAS,SAAS,GAEpC,IAAK,KAAK,WAAY,CAClB,IAAI,EAAe,KAAK,IAAI,KAAK,gBAAkB,KAAK,WACpD,EAAU,KAAK,IAAI,KAAK,WAAa,KAAK,MAC1C,EAAY,KAAK,IAAI,KAAK,aAAe,KAAK,QAC9C,EAAiB,KAAK,qBAAqB,SAAS,KAAK,aAE7D,KAAK,IAAI,gBAAkB,KAAK,IAAI,iBAChC,EAAe,KAAQ,EAAU,KAAQ,EAAY,KAAQ,EAAiB,EAItF,IAAI,EAA2B,IAAvB,KAAK,cAAsB,EAAI,KAAK,IAAI,EAAK,KAAK,cAAe,GACzE,KAAK,UAAY,GAAG,KAAK,KAAK,KAAK,UAAW,KAAK,gBAAiB,GACpE,KAAK,KAAO,GAAG,KAAK,KAAK,KAAK,KAAM,KAAK,WAAY,GACrD,KAAK,OAAS,GAAG,KAAK,KAAK,KAAK,OAAQ,KAAK,aAAc,GAE3D,KAAK,qBAAqB,KAAK,KAAK,aAEpC,KAAK,mBAIT,YAAY,UAAU,gBAAkB,WAEpC,KAAK,OAAO,iBAAiB,EAAE,EAAE,GACjC,KAAK,OAAO,oBAAoB,KAAK,OAAQ,KAAK,KAAM,GAExD,IAAI,EAAW,KAAK,OAAO,cAC3B,EAAS,KAAK,KAAK,OAAO,SAC1B,EAAS,OAAO,KAAK,WACrB,EAAS,IAAI,KAAK,YAClB,KAAK,OAAO,YAAY,IAI5B,YAAY,UAAU,eAAiB,WACnC,KAAK,KAAO,KAAK,WACjB,KAAK,OAAS,KAAK,aACnB,KAAK,UAAY,KAAK,iBAI1B,YAAY,UAAU,kBAAoB,WACtC,IAAI,EAAS,KAAK,IAAI,eAAe,OACjC,EAAQ,KAAK,IAAI,eAAe,MAIpC,KAAK,OAAO,OAAO,cAAgB,EAAS,GAIhD,YAAY,UAAU,WAAa,SAAU,EAAQ,GACjD,IAAkB,EAAd,EAAI,EAAG,EAAI,EAEf,GAAI,aAAkB,GAAG,OAAQ,CAC7B,IAAI,EAAmB,GACnB,EAAU,EAAO,eAAe,UAEpC,IAAK,EAAI,EAAG,EAAI,EAAQ,SAAU,EAE9B,GADA,EAAgB,EAAQ,GAAG,cAEvB,IAAK,EAAI,EAAG,EAAI,EAAc,OAAQ,IAClC,EAAiB,KAAK,EAAc,IAKhD,IAAI,EAAS,EAAO,eAAe,SACnC,IAAK,EAAI,EAAG,EAAI,EAAO,SAAU,EAE7B,GADA,EAAgB,EAAO,GAAG,cAEtB,IAAK,EAAI,EAAG,EAAI,EAAc,OAAQ,IAClC,EAAiB,KAAK,EAAc,IAKhD,IAAK,EAAI,EAAG,EAAI,EAAiB,OAAQ,IACjB,IAAhB,EACA,KAAK,YAAY,KAAK,EAAiB,GAAG,MAE1C,KAAK,YAAY,IAAI,EAAiB,GAAG,MAG7C,GAAe,EAIvB,IAAK,EAAI,EAAG,EAAI,EAAO,SAAS,SAAU,EACtC,GAAe,KAAK,WAAW,EAAO,SAAS,GAAI,GAGvD,OAAO,GAIX,YAAY,UAAU,SAAW,SAAU,GACvC,IAAI,EAAqB,IAAI,GAAG,KAGhC,OAFA,EAAK,gBAAgB,GAAG,KAAK,QAAS,GAE/B,KAAK,OAAO,EAAmB,GAAI,EAAmB,GAAK,GAAG,KAAK,YAI9E,YAAY,UAAU,eAAiB,SAAU,GAC7C,OAAI,KAAK,YAAc,EACZ,GAAG,KAAK,MAAM,EAAU,KAAK,YAAa,KAAK,aAE/C,KAAK,IAAI,EAAU,KAAK,cAKvC,YAAY,UAAU,iBAAmB,SAAU,GAE/C,OAAO,GAAG,KAAK,MAAM,GAAQ,KAAK,eAAgB,KAAK,gBAI3D,YAAY,eAAiB,IAAI,GAAG,KACpC,YAAY,UAAY,IAAI,GAAG,KAE/B,YAAY,UAAU,WAAa,SAAS,EAAM,GAC9C,IAAI,EAAiB,YAAY,eAC7B,EAAY,YAAY,UAE5B,EAAU,mBAAmB,GAAI,EAAK,GACtC,EAAe,KAAK,EAAW,GAE/B,IAAI,EAAqB,IAAI,GAAG,KAIhC,OAFA,EAAe,gBAAgB,GAAG,KAAK,QAAS,GAEzC,KAAK,MAAM,EAAmB,GAAI,EAAmB,GAAK,GAAG,KAAK,YC9Z7E,IAAI,WAAa,GAAG,aAAa,cAEjC,WAAW,WAAW,IAAI,mBAAoB,CAC1C,KAAM,SACN,QAAS,GACT,MAAO,oBACP,YAAa,iEAGjB,WAAW,WAAW,IAAI,sBAAuB,CAC7C,KAAM,SACN,QAAS,IACT,MAAO,uBACP,YAAa,2DAIjB,WAAW,UAAU,WAAa,WAG9B,GAFA,KAAK,YAAc,KAAK,OAAO,OAAO,YAElC,KAAK,YAAa,CAClB,IAAI,EAAO,KAEP,WAAa,SAAU,GACxB,EAAK,WAAW,IAGnB,KAAK,IAAI,MAAM,GAAG,GAAG,gBAAiB,KAAK,YAAa,MACxD,KAAK,IAAI,MAAM,GAAG,GAAG,cAAe,KAAK,UAAW,MACpD,KAAK,IAAI,MAAM,GAAG,GAAG,gBAAiB,KAAK,YAAa,MACxD,KAAK,IAAI,MAAM,GAAG,GAAG,iBAAkB,KAAK,aAAc,MAG1D,OAAO,iBAAiB,WAAY,YAAY,GAGhD,KAAK,GAAG,WAAW,WACf,KAAK,IAAI,MAAM,IAAI,GAAG,gBAAiB,KAAK,YAAa,MACzD,KAAK,IAAI,MAAM,IAAI,GAAG,cAAe,KAAK,UAAW,MACrD,KAAK,IAAI,MAAM,IAAI,GAAG,gBAAiB,KAAK,YAAa,MACzD,KAAK,IAAI,MAAM,IAAI,GAAG,iBAAkB,KAAK,aAAc,MAE3D,OAAO,oBAAoB,WAAY,YAAY,MAM3D,KAAK,IAAI,MAAM,qBAEf,KAAK,gBAAiB,EACtB,KAAK,eAAgB,EACrB,KAAK,UAAY,IAAI,GAAG,MAI5B,WAAW,eAAiB,IAAI,GAAG,KACnC,WAAW,aAAe,IAAI,GAAG,KACjC,WAAW,UAAY,IAAI,GAAG,KAG9B,WAAW,UAAU,IAAM,SAAS,GAChC,IAAI,EAAiB,WAAW,eAC5B,EAAe,WAAW,aAC1B,EAAY,WAAW,UAIvB,EAAS,KAAK,OAAO,OACrB,EAAW,KAAK,YAAY,SAEhC,EAAO,cAAc,EAAY,EAAG,EAAY,EAAG,EAAU,GAC7D,EAAO,cAAc,KAAK,UAAU,EAAG,KAAK,UAAU,EAAG,EAAU,GAEnE,EAAU,KAAK,EAAc,GAE7B,KAAK,YAAY,WAAW,IAAI,IAIpC,WAAW,UAAU,YAAc,SAAU,GACzC,OAAQ,EAAM,QACV,KAAK,GAAG,iBACJ,KAAK,gBAAiB,EACxB,MAEF,KAAK,GAAG,mBACR,KAAK,GAAG,kBACJ,KAAK,eAAgB,IAMjC,WAAW,UAAU,UAAY,SAAU,GACvC,OAAQ,EAAM,QACV,KAAK,GAAG,iBACJ,KAAK,gBAAiB,EACxB,MAEF,KAAK,GAAG,mBACR,KAAK,GAAG,kBACJ,KAAK,eAAgB,IAMjC,WAAW,UAAU,YAAc,SAAU,GAC7B,GAAG,IAAI,MACf,KAAK,gBACL,KAAK,YAAY,OAAS,EAAM,GAAK,KAAK,iBAC1C,KAAK,YAAY,KAAO,EAAM,GAAK,KAAK,kBAEjC,KAAK,eACZ,KAAK,IAAI,GAGb,KAAK,UAAU,IAAI,EAAM,EAAG,EAAM,IAItC,WAAW,UAAU,aAAe,SAAU,GAC1C,KAAK,YAAY,UAAY,EAAM,MAAQ,KAAK,qBAAmD,GAA5B,KAAK,YAAY,UACxF,EAAM,MAAM,kBAIhB,WAAW,UAAU,WAAa,SAAU,GACxC,KAAK,gBAAiB,EACtB,KAAK,eAAgB,GClIzB,IAAI,cAAgB,GAAG,aAAa,iBAGpC,cAAc,UAAU,WAAa,WACjC,KAAK,YAAc,KAAK,OAAO,OAAO,aAI1C,cAAc,UAAU,eAAiB,WACjC,KAAK,cACL,KAAK,cAAgB,KAAK,YAAY,SACtC,KAAK,SAAW,KAAK,YAAY,IACjC,KAAK,WAAa,KAAK,YAAY,MACnC,KAAK,mBAAqB,KAAK,YAAY,WAAW,UAK9D,cAAc,UAAU,OAAS,SAAS,GAClC,KAAK,aACD,KAAK,IAAI,SAAS,WAAW,GAAG,aAChC,KAAK,YAAY,MAAM,KAAK,SAAU,KAAK,WAAY,KAAK,eAC5D,KAAK,YAAY,WAAa,KAAK","sourcesContent":["// touch-input.js\nvar TouchInput = pc.createScript('touchInput');\n\nTouchInput.attributes.add('orbitSensitivity', {\n    type: 'number', \n    default: 0.4, \n    title: 'Orbit Sensitivity', \n    description: 'How fast the camera moves around the orbit. Higher is faster'\n});\n\nTouchInput.attributes.add('distanceSensitivity', {\n    type: 'number', \n    default: 0.2, \n    title: 'Distance Sensitivity', \n    description: 'How fast the camera moves in and out. Higher is faster'\n});\n\n// initialize code called once per entity\nTouchInput.prototype.initialize = function() {\n    this.orbitCamera = this.entity.script.orbitCamera;\n    \n    // Store the position of the touch so we can calculate the distance moved\n    this.lastTouchPoint = new pc.Vec2();\n    this.lastPinchMidPoint = new pc.Vec2();\n    this.lastPinchDistance = 0;\n    \n    if (this.orbitCamera && this.app.touch) {\n        // Use the same callback for the touchStart, touchEnd and touchCancel events as they \n        // all do the same thing which is to deal the possible multiple touches to the screen\n        this.app.touch.on(pc.EVENT_TOUCHSTART, this.onTouchStartEndCancel, this);\n        this.app.touch.on(pc.EVENT_TOUCHEND, this.onTouchStartEndCancel, this);\n        this.app.touch.on(pc.EVENT_TOUCHCANCEL, this.onTouchStartEndCancel, this);\n        \n        this.app.touch.on(pc.EVENT_TOUCHMOVE, this.onTouchMove, this);\n        \n        this.on('destroy', function() {\n            this.app.touch.off(pc.EVENT_TOUCHSTART, this.onTouchStartEndCancel, this);\n            this.app.touch.off(pc.EVENT_TOUCHEND, this.onTouchStartEndCancel, this);\n            this.app.touch.off(pc.EVENT_TOUCHCANCEL, this.onTouchStartEndCancel, this);\n\n            this.app.touch.off(pc.EVENT_TOUCHMOVE, this.onTouchMove, this);\n        });\n    }\n};\n\n\nTouchInput.prototype.getPinchDistance = function (pointA, pointB) {\n    // Return the distance between the two points\n    var dx = pointA.x - pointB.x;\n    var dy = pointA.y - pointB.y;    \n    \n    return Math.sqrt((dx * dx) + (dy * dy));\n};\n\n\nTouchInput.prototype.calcMidPoint = function (pointA, pointB, result) {\n    result.set(pointB.x - pointA.x, pointB.y - pointA.y);\n    result.scale(0.5);\n    result.x += pointA.x;\n    result.y += pointA.y;\n};\n\n\nTouchInput.prototype.onTouchStartEndCancel = function(event) {\n    // We only care about the first touch for camera rotation. As the user touches the screen, \n    // we stored the current touch position\n    var touches = event.touches;\n    if (touches.length == 1) {\n        this.lastTouchPoint.set(touches[0].x, touches[0].y);\n    \n    } else if (touches.length == 2) {\n        // If there are 2 touches on the screen, then set the pinch distance\n        this.lastPinchDistance = this.getPinchDistance(touches[0], touches[1]);\n        this.calcMidPoint(touches[0], touches[1], this.lastPinchMidPoint);\n    }\n};\n\n\nTouchInput.fromWorldPoint = new pc.Vec3();\nTouchInput.toWorldPoint = new pc.Vec3();\nTouchInput.worldDiff = new pc.Vec3();\n\n\nTouchInput.prototype.pan = function(midPoint) {\n    var fromWorldPoint = TouchInput.fromWorldPoint;\n    var toWorldPoint = TouchInput.toWorldPoint;\n    var worldDiff = TouchInput.worldDiff;\n    \n    // For panning to work at any zoom level, we use screen point to world projection\n    // to work out how far we need to pan the pivotEntity in world space \n    var camera = this.entity.camera;\n    var distance = this.orbitCamera.distance;\n    \n    camera.screenToWorld(midPoint.x, midPoint.y, distance, fromWorldPoint);\n    camera.screenToWorld(this.lastPinchMidPoint.x, this.lastPinchMidPoint.y, distance, toWorldPoint);\n    \n    worldDiff.sub2(toWorldPoint, fromWorldPoint);\n     \n    this.orbitCamera.pivotPoint.add(worldDiff);    \n};\n\n\nTouchInput.pinchMidPoint = new pc.Vec2();\n\nTouchInput.prototype.onTouchMove = function(event) {\n    var pinchMidPoint = TouchInput.pinchMidPoint;\n    \n    // We only care about the first touch for camera rotation. Work out the difference moved since the last event\n    // and use that to update the camera target position \n    var touches = event.touches;\n    if (touches.length == 1) {\n        var touch = touches[0];\n        \n        this.orbitCamera.pitch -= (touch.y - this.lastTouchPoint.y) * this.orbitSensitivity;\n        this.orbitCamera.yaw -= (touch.x - this.lastTouchPoint.x) * this.orbitSensitivity;\n        \n        this.lastTouchPoint.set(touch.x, touch.y);\n    \n    } else if (touches.length == 2) {\n        // Calculate the difference in pinch distance since the last event\n        var currentPinchDistance = this.getPinchDistance(touches[0], touches[1]);\n        var diffInPinchDistance = currentPinchDistance - this.lastPinchDistance;\n        this.lastPinchDistance = currentPinchDistance;\n                \n        this.orbitCamera.distance -= (diffInPinchDistance * this.distanceSensitivity * 0.1) * (this.orbitCamera.distance * 0.1);\n        \n        // Calculate pan difference\n        this.calcMidPoint(touches[0], touches[1], pinchMidPoint);\n        this.pan(pinchMidPoint);\n        this.lastPinchMidPoint.copy(pinchMidPoint);\n    }\n};\n\n\n","// orbit-camera.js\nvar OrbitCamera = pc.createScript('orbitCamera');\n\nOrbitCamera.attributes.add('autoRender', {\n    type: 'boolean', \n    default: true, \n    title: 'Auto Render', \n    description: 'Disable to only render when camera is moving (saves power when the camera is still)'\n});\n\nOrbitCamera.attributes.add('distanceMax', {type: 'number', default: 0, title: 'Distance Max', description: 'Setting this at 0 will give an infinite distance limit'});\nOrbitCamera.attributes.add('distanceMin', {type: 'number', default: 0, title: 'Distance Min'});\nOrbitCamera.attributes.add('pitchAngleMax', {type: 'number', default: 90, title: 'Pitch Angle Max (degrees)'});\nOrbitCamera.attributes.add('pitchAngleMin', {type: 'number', default: -90, title: 'Pitch Angle Min (degrees)'});\n\nOrbitCamera.attributes.add('inertiaFactor', {\n    type: 'number',\n    default: 0,\n    title: 'Inertia Factor',\n    description: 'Higher value means that the camera will continue moving after the user has stopped dragging. 0 is fully responsive.'\n});\n\nOrbitCamera.attributes.add('focusEntity', {\n    type: 'entity',\n    title: 'Focus Entity',\n    description: 'Entity for the camera to focus on. If blank, then the camera will use the whole scene'\n});\n\nOrbitCamera.attributes.add('frameOnStart', {\n    type: 'boolean',\n    default: true,\n    title: 'Frame on Start',\n    description: 'Frames the entity or scene at the start of the application.\"'\n});\n\n\n// Property to get and set the distance between the pivot point and camera\n// Clamped between this.distanceMin and this.distanceMax\nObject.defineProperty(OrbitCamera.prototype, \"distance\", {\n    get: function() {\n        return this._targetDistance;\n    },\n\n    set: function(value) {\n        this._targetDistance = this._clampDistance(value);\n    }\n});\n\n\n// Property to get and set the pitch of the camera around the pivot point (degrees)\n// Clamped between this.pitchAngleMin and this.pitchAngleMax\n// When set at 0, the camera angle is flat, looking along the horizon\nObject.defineProperty(OrbitCamera.prototype, \"pitch\", {\n    get: function() {\n        return this._targetPitch;\n    },\n\n    set: function(value) {\n        this._targetPitch = this._clampPitchAngle(value);\n    }\n});\n\n\n// Property to get and set the yaw of the camera around the pivot point (degrees)\nObject.defineProperty(OrbitCamera.prototype, \"yaw\", {\n    get: function() {\n        return this._targetYaw;\n    },\n\n    set: function(value) {\n        this._targetYaw = value;\n\n        // Ensure that the yaw takes the shortest route by making sure that \n        // the difference between the targetYaw and the actual is 180 degrees\n        // in either direction\n        var diff = this._targetYaw - this._yaw;\n        var reminder = diff % 360;\n        if (reminder > 180) {\n            this._targetYaw = this._yaw - (360 - reminder);\n        } else if (reminder < -180) {\n            this._targetYaw = this._yaw + (360 + reminder);\n        } else {\n            this._targetYaw = this._yaw + reminder;\n        }\n    }\n});\n\n\n// Property to get and set the world position of the pivot point that the camera orbits around\nObject.defineProperty(OrbitCamera.prototype, \"pivotPoint\", {\n    get: function() {\n        return this._pivotPoint;\n    },\n\n    set: function(value) {\n        this._pivotPoint.copy(value);\n    }\n});\n\n\n// Moves the camera to look at an entity and all its children so they are all in the view\nOrbitCamera.prototype.focus = function (focusEntity) {\n    // Calculate an bounding box that encompasses all the models to frame in the camera view\n    this._buildAabb(focusEntity, 0);\n\n    var halfExtents = this._modelsAabb.halfExtents;\n\n    var distance = Math.max(halfExtents.x, Math.max(halfExtents.y, halfExtents.z));\n    distance = (distance / Math.tan(0.5 * this.entity.camera.fov * pc.math.DEG_TO_RAD));\n    distance = (distance * 2);\n\n    this.distance = distance;\n\n    this._removeInertia();\n\n    this._pivotPoint.copy(this._modelsAabb.center);\n};\n\n\nOrbitCamera.distanceBetween = new pc.Vec3();\n\n// Set the camera position to a world position and look at a world position\n// Useful if you have multiple viewing angles to swap between in a scene\nOrbitCamera.prototype.resetAndLookAtPoint = function (resetPoint, lookAtPoint) {\n    this.pivotPoint.copy(lookAtPoint);\n    this.entity.setPosition(resetPoint);\n\n    this.entity.lookAt(lookAtPoint);\n\n    var distance = OrbitCamera.distanceBetween;\n    distance.sub2(lookAtPoint, resetPoint);\n    this.distance = distance.length();\n\n    this.pivotPoint.copy(lookAtPoint);\n\n    var cameraQuat = this.entity.getRotation();\n    this.yaw = this._calcYaw(cameraQuat);\n    this.pitch = this._calcPitch(cameraQuat, this.yaw);\n\n    this._removeInertia();\n    this._updatePosition();\n\n    if (!this.autoRender) {\n        this.app.renderNextFrame = true;\n    }\n};\n\n\n// Set camera position to a world position and look at an entity in the scene\n// Useful if you have multiple models to swap between in a scene\nOrbitCamera.prototype.resetAndLookAtEntity = function (resetPoint, entity) {\n    this._buildAabb(entity, 0);\n    this.resetAndLookAtPoint(resetPoint, this._modelsAabb.center);\n};\n\n\n// Set the camera at a specific, yaw, pitch and distance without inertia (instant cut)\nOrbitCamera.prototype.reset = function (yaw, pitch, distance) {\n    this.pitch = pitch;\n    this.yaw = yaw;\n    this.distance = distance;\n\n    this._removeInertia();\n\n    if (!this.autoRender) {\n        this.app.renderNextFrame = true;\n    }\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n// Private methods\n\nOrbitCamera.prototype.initialize = function () {\n    this._checkAspectRatio();\n\n    // Find all the models in the scene that are under the focused entity\n    this._modelsAabb = new pc.BoundingBox();\n    this._buildAabb(this.focusEntity || this.app.root, 0);\n\n    this.entity.lookAt(this._modelsAabb.center);\n\n    this._pivotPoint = new pc.Vec3();\n    this._pivotPoint.copy(this._modelsAabb.center);\n\n    this._lastFramePivotPoint = this._pivotPoint.clone();\n\n    // Calculate the camera euler angle rotation around x and y axes\n    // This allows us to place the camera at a particular rotation to begin with in the scene\n    var cameraQuat = this.entity.getRotation();\n\n    // Preset the camera\n    this._yaw = this._calcYaw(cameraQuat);\n    this._pitch = this._clampPitchAngle(this._calcPitch(cameraQuat, this._yaw));\n    this.entity.setLocalEulerAngles(this._pitch, this._yaw, 0);\n\n    this._distance = 0;\n\n    this._targetYaw = this._yaw;\n    this._targetPitch = this._pitch;\n\n    // If we have ticked focus on start, then attempt to position the camera where it frames\n    // the focused entity and move the pivot point to entity's position otherwise, set the distance\n    // to be between the camera position in the scene and the pivot point\n    if (this.frameOnStart) {\n        this.focus(this.focusEntity || this.app.root);\n    } else {\n        var distanceBetween = new pc.Vec3();\n        distanceBetween.sub2(this.entity.getPosition(), this._pivotPoint);\n        this._distance = this._clampDistance(distanceBetween.length());\n    }\n\n    this._targetDistance = this._distance;\n\n    this._autoRenderDefault = this.app.autoRender;\n\n    // Do not enable autoRender if it's already off as it's controlled elsewhere\n    if (this.app.autoRender) {\n        this.app.autoRender = this.autoRender;\n    }\n\n    if (!this.autoRender) {\n        this.app.renderNextFrame = true;\n    }\n\n    this.on('attr:autoRender', function (value, prev) {\n        this.app.autoRender = value;\n        if (!this.autoRender) {\n            this.app.renderNextFrame = true;\n        }\n    }, this);\n\n    // Reapply the clamps if they are changed in the editor\n    this.on('attr:distanceMin', function (value, prev) {\n        this._targetDistance = this._clampDistance(this._distance);\n    }, this);\n\n    this.on('attr:distanceMax', function (value, prev) {\n        this._targetDistance = this._clampDistance(this._distance);\n    }, this);\n\n    this.on('attr:pitchAngleMin', function (value, prev) {\n        this._targetPitch = this._clampPitchAngle(this._pitch);\n    }, this);\n\n    this.on('attr:pitchAngleMax', function (value, prev) {\n        this._targetPitch = this._clampPitchAngle(this._pitch);\n    }, this);\n\n    // Focus on the entity if we change the focus entity\n    this.on('attr:focusEntity', function (value, prev) {\n        if (this.frameOnStart) {\n            this.focus(value || this.app.root);\n        } else {\n            this.resetAndLookAtEntity(this.entity.getPosition(), value || this.app.root);\n        }\n    }, this);\n\n    this.on('attr:frameOnStart', function (value, prev) {\n        if (value) {\n            this.focus(this.focusEntity || this.app.root);\n        }\n    }, this);\n\n    var onResizeCanvas = function () {\n        this._checkAspectRatio();\n        if (!this.autoRender) {\n            this.app.renderNextFrame = true;\n        }\n    };\n\n    this.app.graphicsDevice.on('resizecanvas', onResizeCanvas, this);\n\n    this.on('destroy', function() {\n        this.app.graphicsDevice.off('resizecanvas', onResizeCanvas, this);\n        this.app.autoRender = this._defaultAutoRender;\n    }, this);\n};\n\n\nOrbitCamera.prototype.update = function(dt) {\n    // Check if we have are still moving for autorender\n    if (!this.autoRender) {\n        var distanceDiff = Math.abs(this._targetDistance - this._distance);\n        var yawDiff = Math.abs(this._targetYaw - this._yaw);\n        var pitchDiff = Math.abs(this._targetPitch - this._pitch);\n        var pivotPointDiff = this._lastFramePivotPoint.distance(this._pivotPoint);\n    \n        this.app.renderNextFrame = this.app.renderNextFrame || \n            distanceDiff > 0.01 || yawDiff > 0.01 || pitchDiff > 0.01 || pivotPointDiff > 0;\n    }\n\n    // Add inertia, if any\n    var t = this.inertiaFactor === 0 ? 1 : Math.min(dt / this.inertiaFactor, 1);\n    this._distance = pc.math.lerp(this._distance, this._targetDistance, t);\n    this._yaw = pc.math.lerp(this._yaw, this._targetYaw, t);\n    this._pitch = pc.math.lerp(this._pitch, this._targetPitch, t);\n\n    this._lastFramePivotPoint.copy(this._pivotPoint);\n\n    this._updatePosition();\n};\n\n\nOrbitCamera.prototype._updatePosition = function () {\n    // Work out the camera position based on the pivot point, pitch, yaw and distance\n    this.entity.setLocalPosition(0,0,0);\n    this.entity.setLocalEulerAngles(this._pitch, this._yaw, 0);\n\n    var position = this.entity.getPosition();\n    position.copy(this.entity.forward);\n    position.scale(-this._distance);\n    position.add(this.pivotPoint);\n    this.entity.setPosition(position);\n};\n\n\nOrbitCamera.prototype._removeInertia = function () {\n    this._yaw = this._targetYaw;\n    this._pitch = this._targetPitch;\n    this._distance = this._targetDistance;\n};\n\n\nOrbitCamera.prototype._checkAspectRatio = function () {\n    var height = this.app.graphicsDevice.height;\n    var width = this.app.graphicsDevice.width;\n\n    // Match the axis of FOV to match the aspect ratio of the canvas so\n    // the focused entities is always in frame\n    this.entity.camera.horizontalFov = height > width;\n};\n\n\nOrbitCamera.prototype._buildAabb = function (entity, modelsAdded) {\n    var i = 0, j = 0, meshInstances;\n    \n    if (entity instanceof pc.Entity) {\n        var allMeshInstances = [];\n        var renders = entity.findComponents('render');\n\n        for (i = 0; i < renders.length; ++i) {\n            meshInstances = renders[i].meshInstances;\n            if (meshInstances) {\n                for (j = 0; j < meshInstances.length; j++) {\n                    allMeshInstances.push(meshInstances[j]);\n                }\n            }\n        }  \n\n        var models = entity.findComponents('model');\n        for (i = 0; i < models.length; ++i) {\n            meshInstances = models[i].meshInstances;\n            if (meshInstances) {\n                for (j = 0; j < meshInstances.length; j++) {\n                    allMeshInstances.push(meshInstances[j]);\n                }\n            }\n        }  \n\n        for (i = 0; i < allMeshInstances.length; i++) {\n            if (modelsAdded === 0) {\n                this._modelsAabb.copy(allMeshInstances[i].aabb);\n            } else {\n                this._modelsAabb.add(allMeshInstances[i].aabb);\n            }\n\n            modelsAdded += 1;\n        }\n    }\n\n    for (i = 0; i < entity.children.length; ++i) {\n        modelsAdded += this._buildAabb(entity.children[i], modelsAdded);\n    }\n\n    return modelsAdded;\n};\n\n\nOrbitCamera.prototype._calcYaw = function (quat) {\n    var transformedForward = new pc.Vec3();\n    quat.transformVector(pc.Vec3.FORWARD, transformedForward);\n\n    return Math.atan2(-transformedForward.x, -transformedForward.z) * pc.math.RAD_TO_DEG;\n};\n\n\nOrbitCamera.prototype._clampDistance = function (distance) {\n    if (this.distanceMax > 0) {\n        return pc.math.clamp(distance, this.distanceMin, this.distanceMax);\n    } else {\n        return Math.max(distance, this.distanceMin);\n    }\n};\n\n\nOrbitCamera.prototype._clampPitchAngle = function (pitch) {\n    // Negative due as the pitch is inversed since the camera is orbiting the entity\n    return pc.math.clamp(pitch, -this.pitchAngleMax, -this.pitchAngleMin);\n};\n\n\nOrbitCamera.quatWithoutYaw = new pc.Quat();\nOrbitCamera.yawOffset = new pc.Quat();\n\nOrbitCamera.prototype._calcPitch = function(quat, yaw) {\n    var quatWithoutYaw = OrbitCamera.quatWithoutYaw;\n    var yawOffset = OrbitCamera.yawOffset;\n\n    yawOffset.setFromEulerAngles(0, -yaw, 0);\n    quatWithoutYaw.mul2(yawOffset, quat);\n\n    var transformedForward = new pc.Vec3();\n\n    quatWithoutYaw.transformVector(pc.Vec3.FORWARD, transformedForward);\n\n    return Math.atan2(transformedForward.y, -transformedForward.z) * pc.math.RAD_TO_DEG;\n};\n\n","// mouse-input.js\nvar MouseInput = pc.createScript('mouseInput');\n\nMouseInput.attributes.add('orbitSensitivity', {\n    type: 'number', \n    default: 0.3, \n    title: 'Orbit Sensitivity', \n    description: 'How fast the camera moves around the orbit. Higher is faster'\n});\n\nMouseInput.attributes.add('distanceSensitivity', {\n    type: 'number', \n    default: 0.15, \n    title: 'Distance Sensitivity', \n    description: 'How fast the camera moves in and out. Higher is faster'\n});\n\n// initialize code called once per entity\nMouseInput.prototype.initialize = function() {\n    this.orbitCamera = this.entity.script.orbitCamera;\n        \n    if (this.orbitCamera) {\n        var self = this;\n        \n        var onMouseOut = function (e) {\n           self.onMouseOut(e);\n        };\n        \n        this.app.mouse.on(pc.EVENT_MOUSEDOWN, this.onMouseDown, this);\n        this.app.mouse.on(pc.EVENT_MOUSEUP, this.onMouseUp, this);\n        this.app.mouse.on(pc.EVENT_MOUSEMOVE, this.onMouseMove, this);\n        this.app.mouse.on(pc.EVENT_MOUSEWHEEL, this.onMouseWheel, this);\n\n        // Listen to when the mouse travels out of the window\n        window.addEventListener('mouseout', onMouseOut, false);\n        \n        // Remove the listeners so if this entity is destroyed\n        this.on('destroy', function() {\n            this.app.mouse.off(pc.EVENT_MOUSEDOWN, this.onMouseDown, this);\n            this.app.mouse.off(pc.EVENT_MOUSEUP, this.onMouseUp, this);\n            this.app.mouse.off(pc.EVENT_MOUSEMOVE, this.onMouseMove, this);\n            this.app.mouse.off(pc.EVENT_MOUSEWHEEL, this.onMouseWheel, this);\n\n            window.removeEventListener('mouseout', onMouseOut, false);\n        });\n    }\n    \n    // Disabling the context menu stops the browser displaying a menu when\n    // you right-click the page\n    this.app.mouse.disableContextMenu();\n  \n    this.lookButtonDown = false;\n    this.panButtonDown = false;\n    this.lastPoint = new pc.Vec2();\n};\n\n\nMouseInput.fromWorldPoint = new pc.Vec3();\nMouseInput.toWorldPoint = new pc.Vec3();\nMouseInput.worldDiff = new pc.Vec3();\n\n\nMouseInput.prototype.pan = function(screenPoint) {\n    var fromWorldPoint = MouseInput.fromWorldPoint;\n    var toWorldPoint = MouseInput.toWorldPoint;\n    var worldDiff = MouseInput.worldDiff;\n    \n    // For panning to work at any zoom level, we use screen point to world projection\n    // to work out how far we need to pan the pivotEntity in world space \n    var camera = this.entity.camera;\n    var distance = this.orbitCamera.distance;\n    \n    camera.screenToWorld(screenPoint.x, screenPoint.y, distance, fromWorldPoint);\n    camera.screenToWorld(this.lastPoint.x, this.lastPoint.y, distance, toWorldPoint);\n\n    worldDiff.sub2(toWorldPoint, fromWorldPoint);\n       \n    this.orbitCamera.pivotPoint.add(worldDiff);    \n};\n\n\nMouseInput.prototype.onMouseDown = function (event) {\n    switch (event.button) {\n        case pc.MOUSEBUTTON_LEFT: {\n            this.lookButtonDown = true;\n        } break;\n            \n        case pc.MOUSEBUTTON_MIDDLE: \n        case pc.MOUSEBUTTON_RIGHT: {\n            this.panButtonDown = true;\n        } break;\n    }\n};\n\n\nMouseInput.prototype.onMouseUp = function (event) {\n    switch (event.button) {\n        case pc.MOUSEBUTTON_LEFT: {\n            this.lookButtonDown = false;\n        } break;\n            \n        case pc.MOUSEBUTTON_MIDDLE: \n        case pc.MOUSEBUTTON_RIGHT: {\n            this.panButtonDown = false;            \n        } break;\n    }\n};\n\n\nMouseInput.prototype.onMouseMove = function (event) {    \n    var mouse = pc.app.mouse;\n    if (this.lookButtonDown) {\n        this.orbitCamera.pitch -= event.dy * this.orbitSensitivity;\n        this.orbitCamera.yaw -= event.dx * this.orbitSensitivity;\n        \n    } else if (this.panButtonDown) {\n        this.pan(event);   \n    }\n    \n    this.lastPoint.set(event.x, event.y);\n};\n\n\nMouseInput.prototype.onMouseWheel = function (event) {\n    this.orbitCamera.distance -= event.wheel * this.distanceSensitivity * (this.orbitCamera.distance * 0.1);\n    event.event.preventDefault();\n};\n\n\nMouseInput.prototype.onMouseOut = function (event) {\n    this.lookButtonDown = false;\n    this.panButtonDown = false;\n};\n\n","// keyboard-input.js\nvar KeyboardInput = pc.createScript('keyboardInput');\n\n// initialize code called once per entity\nKeyboardInput.prototype.initialize = function() {\n    this.orbitCamera = this.entity.script.orbitCamera;\n};\n\n\nKeyboardInput.prototype.postInitialize = function() {\n    if (this.orbitCamera) {\n        this.startDistance = this.orbitCamera.distance;\n        this.startYaw = this.orbitCamera.yaw;\n        this.startPitch = this.orbitCamera.pitch;\n        this.startPivotPosition = this.orbitCamera.pivotPoint.clone();\n    }\n};\n\n// update code called every frame\nKeyboardInput.prototype.update = function(dt) {\n    if (this.orbitCamera) {\n        if (this.app.keyboard.wasPressed(pc.KEY_SPACE)) {\n            this.orbitCamera.reset(this.startYaw, this.startPitch, this.startDistance);\n            this.orbitCamera.pivotPoint = this.startPivotPosition;\n        }\n    }\n};\n\n\n"]}